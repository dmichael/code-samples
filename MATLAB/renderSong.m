%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   [outputFilename] = renderSong(simSpecsFilename,...
%                                  networkSpecsFilename,...
%                                  genotypesFilename,...
%                                  outputPath,genNum,indNum,plot)
%
%   David M Michael 8.2005
%   
%   This file expects the name (str) of two .mat file containing
%   simulation specifications (simulationSpecs) and genotypes.
%
%   simulationSpecs should contain variables for:
%       - audio specs: sampling freq (Hz) and simulation length (ms)
%       - network specifications: number of neurons and thier settings
%       - genotypes of the population at the current generation
%
%   These .mat files are ultimately generated by the file
%   'evolutionarySongbird.m'. 
%   This format for the function allows the rendering of genotypes from 
%   any particular evolutionary run with saved specifications.
%   
%   genNum (generation number) defaults to 1
%   indNum (individual number) defaults to 1
%
%   File dependancies: 
%       unpackGenotype.m
%       izhikevichEuler.m
%       syrinxOscillator.m
%       syringealForcing.m
%       plotNetwork.m (if plot==1)
%   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function [outputFilename] = renderSong(simSpecsFilename,...
                                       networkSpecsFilename,...
                                       genotypesFilename,...
                                        outputPath,genNum,indNum,plot)

if nargin < 4, indNum = 1; end
if nargin < 3, genNum = 1; end

load(simSpecsFilename);
load(networkSpecsFilename);
load(genotypesFilename);

% In evolutionary runs,
% MATLAB retains variables even upon reassignment
% thus, they must be explicitly cleared.
clear functions
clear W a b c d tau_pressure tau_tension v u pressure tension...
    syrinx_y syrinx_t error tau_g firings dudt dvdt dgdt...
    FIRINGS polarity fired...
    INPUT Gex control_value delays soundVector renderedFilter
    
disp(['GENERATION ', num2str(genNum)]);

% SYRINX INITIAL CONDITIONS
% --------------------------------------------------------
syrinx_y_init=[1;0];            % initial values for integration
syrinx_c=50;                    % linear dissipation constant
f0=14;                          % labial constriction    
% -------------------------------------------------------

% GENOTYPE TO PHENOTYPE MAPPING
% -------------------------------------------------------
disp(['BIRD ', num2str(indNum)]);
tic; disp('Unpacking genome...')
[W,a,b,c,d,tau_pressure,tau_tension,Wp,Wt,delays] = ...
                unpackGenotype(genotypes(indNum,:),N,numProj);
toc; disp(' ');
% -------------------------------------------------------


% SPECIFICS OF OSCINE SYNAPTIC CONNECTIVITY (Network architecture)
% -------------------------------------------------------
% NB: Connectivity = W(to,from) !!!!!
%
% MAKE ALL HVC CONNECTIONS (+positive)
% and NO INTERCONNECTIONS
W(:,1:HVC_total) = abs(W(:,1:HVC_total));
W(1:HVC_total,1:HVC_total) = 0;

% no direct HVC connections to the projection neurons
W(RA_projection,1:HVC_total) = 0;

% make all projection neurons positive
W(RA_projection,RA_projection) = ...
                    abs(W(RA_projection,RA_projection));

% !! NO HVC connections from RA
W(1:HVC_total,RA_interneurons) = 0;
W(1:HVC_total,RA_pressure) = 0;
W(1:HVC_total,RA_tension) = 0;

% SET RA PROJECTION CONNECTIVITY TO ZERO
W(RA_pressure,RA_tension) = 0; W(RA_tension,RA_pressure) = 0;

% NO RA SELF-CONNECTIONS
W(RA_pressure,RA_pressure) = 0; W(RA_tension,RA_tension) = 0;


%W(RA_pressure,RA_pressure)=W(RA_pressure,RA_pressure).*0.5;

%W(RA_tension,RA_tension)=W(RA_tension,RA_tension).*0.5;

% no "backpropagation" from projection neurons
W(RA_interneurons,RA_projection) = 0;

%delays(RA_interneurons,RA_interneurons) = 0;
delays(RA_projection,RA_interneurons) = 0;

delays(RA_projection,RA_projection) = 0;

% save('weights_and_delays','W','delays')
% -------------------------------------------------------

% INTEGRATE THE NETWORK...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tic; disp('Integrating network...');
[v,a,b,c,d,FIRINGS,INPUT] = izhikevichEuler_Fee2(tfinal,dt,N,...
                            W,a,b,c,d,delays,T,HVC_total,RA_total);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% temporarily fix the connection weights to syrinx
Wp = 0.35*ones(size(Wp));
Wt = 0.35*ones(size(Wt));


% SYNRINGEAL FORCING...(get control parameters)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
EexP = 10; VRESTP = -1;
pressure = ...
syringealForcing(T,dt,v(RA_pressure,:),tau_pressure,Wp,EexP,VRESTP);

EexT = 1300; VRESTT = 30;
tension = ...
syringealForcing(T,dt,v(RA_tension,:),tau_tension,Wt,EexT,VRESTT);

toc; disp(' ');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% SYRINX INTEGRATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tic; disp 'Integrating syrinx...';

[syrinx_t,syrinx_y] = odeRK4(@syrinxOscillator,tfinal,dt,...
                                syrinx_y_init,syrinx_c,f0,...
                                pressure,tension);
toc; disp ' '; 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% AUDIO OUTPUT
% -------------------------------------------------------
disp 'Writing audio output...';
outputFilename=[outputPath,'bird_',num2str(indNum),'.wav']
    
soundVector = syrinx_y(2,1:oversample:end);

% Low-pass Filter 
[b,a]=butter(10,.4,'low');
renderedFilter=filter(b,a,soundVector);


wavwrite(scale(renderedFilter,-0.9,0.9),Fs,outputFilename);
disp 'Done.'; disp ' ';
% -------------------------------------------------------
